---
import {useTranslations} from "@/i18n/utils";
import type {ui} from "@/i18n/ui";

// Infos
import EntryInfo from "@/layouts/_partials/EntryInfo.astro";

// Singles

import ViewHome from "@/views/home/home.astro";

// Pages
import ViewPagesContentBuilder from "@/views/pages/contentBuilder.astro";
import ViewPagesOverviewNews from "@/views/pages/overviewNews.astro";

// News
import ViewNewsContentBuilder from "@/views/news/contentBuilder.astro";

export interface Props {
  title: string;
  siteHandle: string;
  siteId: string;
  sectionHandle: string;
  typeHandle: string;
  uri: string;
  id: string;
  token: string;
  xCraftPreview: string;
  xCraftLivePreview: string;
}

const {
  siteHandle,
  sectionHandle,
  typeHandle,
  uri,
  id,
  siteId,
  title,
  token,
  xCraftPreview,
  xCraftLivePreview,
} = Astro.props;

const t = siteHandle
  ? useTranslations(siteHandle as keyof typeof ui)
  : useTranslations("default" as keyof typeof ui);

// Get the right layout based on the site handle
let View = ViewHome;

const views: IViews = {
  home: {
    home: ViewHome,
  },
  pages: {
    contentBuilder: ViewPagesContentBuilder,
    overviewNews: ViewPagesOverviewNews,
  },
  news: {
    contentBuilder: ViewNewsContentBuilder,
  },
};

if (sectionHandle in views && typeHandle in views[sectionHandle]) {
  View = views[sectionHandle][typeHandle];
}
---

{siteId && id &&
<View {...Astro.props}/>}
<EntryInfo {...Astro.props}/>
