# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Formats a date in the desired format. Can be applied to all fields, only changes output of DateTime fields."
directive @formatDateTime(
    "The format to use. Can be `short`, `medium`, `long`, `full`, an [ICU date format](http://userguide.icu-project.org/formatparse/datetime), or a [PHP date format](https://www.php.net/manual/en/function.date.php). Defaults to the [Atom date time format](https://www.php.net/manual/en/class.datetimeinterface.php#datetime.constants.atom])."
    format: String = "Y-m-d\\TH:i:sP",
    "The locale to use when formatting the date. (E.g., en-US)"
    locale: String,
    "The full name of the timezone (e.g., America/New_York). Defaults to UTC if no timezone set on the field."
    timezone: String = "UTC"
) on FIELD

"Parses the passed field value as Markdown."
directive @markdown(
    "The “flavor” of Markdown the input should be interpreted with. Accepts the same arguments as yii\\helpers\\Markdown::process()."
    flavor: String,
    "Whether to only parse inline elements, omitting any `<p>` tags."
    inlineOnly: Boolean = false
) on FIELD

"Formats a money object to the desired format. It can be applied to any fields, but only changes a Money field."
directive @money(
    "This specifies the format to output. This can be `amount`, `decimal`, `number`, or `string`. It defaults to the `string`."
    format: String = "string",
    "The locale to use when formatting the money value. (e.g. `en_US`). This argument is only valid with `number` and `string` formats."
    locale: String
) on FIELD

"Parses the element references on the field."
directive @parseRefs on FIELD

"Returns a URL for an [asset transform](https://craftcms.com/docs/4.x/image-transforms.html). Accepts the same arguments you would use for a transform in Craft."
directive @transform(
    "The format to use for the transform"
    format: String,
    "The handle of the named transform to use."
    handle: String,
    "Height for the generated transform"
    height: Int,
    "[_Deprecated_] This argument is deprecated and has no effect."
    immediately: Boolean,
    "The interlace mode to use for the transform"
    interlace: String,
    "The mode to use for the generated transform."
    mode: String,
    "The position to use when cropping, if no focal point specified."
    position: String,
    "The quality of the transform"
    quality: Int,
    "The handle of the named transform to use."
    transform: String,
    "Width for the generated transform"
    width: Int
) on FIELD

"This directive is used to return a URL for an using Imager X."
directive @imagerTransform(
    "The format to use for the transform"
    format: String,
    "Handle of named transform"
    handle: String,
    "Height for the generated transform"
    height: Int,
    "The interlace mode to use for the transform"
    interlace: String,
    "The mode to use for the generated transform."
    mode: String,
    "The position to use when cropping, if no focal point specified."
    position: String,
    "The quality of the transform"
    quality: Int,
    "Data return type. Can be `url`, `base64` or `dataUri`"
    return: String,
    "Width for the generated transform"
    width: Int
) on FIELD

"This directive is used to return a srcset from a named transform in Imager X."
directive @imagerSrcset(
    "Handle for named transform to use"
    handle: String
) on FIELD

"This is the interface implemented by all addresses."
interface AddressInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "First line of the address"
    addressLine1: String
    "Second line of the address"
    addressLine2: String
    "Administrative area."
    administrativeArea: String
    "Whether the element is archived or not."
    archived: Boolean
    "Two-letter country code"
    countryCode: String!
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Dependent locality"
    dependentLocality: String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The first name on the address."
    firstName: String
    "The full name on the address."
    fullName: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The last name on the address."
    lastName: String
    "Latitude"
    latitude: String
    "Locality"
    locality: String
    "Longitude"
    longitude: String
    "Organization name"
    organization: String
    "Organization tax ID"
    organizationTaxId: String
    "Postal code"
    postalCode: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "Sorting code"
    sortingCode: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

"This is the interface implemented by all elements."
interface ElementInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

"This is the interface implemented by all entries."
interface EntryInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "The entry’s ancestors, if the section is a structure. Accepts the same arguments as the `entries` query."
    ancestors(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): [EntryInterface!]!
    "Whether the element is archived or not."
    archived: Boolean
    "Returns the entry’s canonical ID."
    canonicalId: Int
    "Returns the entry’s canonical UUID."
    canonicalUid: String
    "The entry’s children, if the section is a structure. Accepts the same arguments as the `entries` query."
    children(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): [EntryInterface!]!
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "The entry’s descendants, if the section is a structure. Accepts the same arguments as the `entries` query."
    descendants(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): [EntryInterface!]!
    "The draft ID (from the `drafts` table)."
    draftId: Int
    "The name of the draft."
    draftName: String
    "The notes for the draft."
    draftNotes: String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The expiry date of the entry."
    expiryDate: DateTime
    "The ID of the entity"
    id: ID
    "Returns whether this is a draft."
    isDraft: Boolean
    "Returns whether this is a revision."
    isRevision: Boolean
    "Returns whether this is an unpublished draft."
    isUnpublishedDraft: Boolean
    "The language of the site element is associated with."
    language: String
    "The element’s level within its structure"
    level: Int
    "The element’s left position within its structure."
    lft: Int
    "The same element in other locales."
    localized(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): [EntryInterface!]!
    "Returns the next element relative to this one, from a given set of criteria."
    next(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): EntryInterface
    "The entry’s parent, if the section is a structure."
    parent(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): EntryInterface
    "The entry’s post date."
    postDate: DateTime
    "Returns the previous element relative to this one, from a given set of criteria."
    prev(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): EntryInterface
    "The revision ID (from the `revisions` table)."
    revisionId: Int
    "The element’s right position within its structure."
    rgt: Int
    "The element’s structure’s root ID"
    root: Int
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The handle of the section that contains the entry."
    sectionHandle: String!
    "The ID of the section that contains the entry."
    sectionId: Int!
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "Returns the entry’s canonical ID."
    sourceId: Int @deprecated(reason: "this field has been deprecated since Craft 3.7.7. Use `canonicalId` instead.")
    "Returns the entry’s canonical UUID."
    sourceUid: String @deprecated(reason: "this field has been deprecated since Craft 3.7.7. Use `canonicalUid` instead.")
    "The element’s status."
    status: String
    "The element’s structure ID."
    structureId: Int
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the entry type that contains the entry."
    typeHandle: String!
    "The ID of the entry type that contains the entry."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
    "The element’s full URL"
    url: String
}

"This is the interface implemented by all fields."
interface FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

"This is the interface implemented by all forms."
interface FormInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "A list of captcha values (name and value) to assist with spam protection."
    captchas: [FormieCaptchaType]
    "The form’s config as JSON."
    configJson: String
    "A CSRF token (name and value)."
    csrfToken: FormieCsrfTokenType
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The form’s fields."
    formFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The form’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The form’s pages."
    pages: [PageInterface]
    "The form’s rows."
    rows: [RowInterface]
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The form’s settings."
    settings: FormSettingsType
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The form’s endpoint for sending submissions to, if using POST requests."
    submissionEndpoint: String
    "The form’s GQL mutation name for submissions to use."
    submissionMutationName: String
    "The form’s rendered HTML."
    templateHtml(
        "The form template HTML will be rendered with these JSON serialized options."
        options: String,
        "The form field values will be populated with these JSON serialized options."
        populateFormValues: String
    ): String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

"This is the interface implemented by Imager X."
interface ImagerTransformedImageInterface {
    "Extension of transformed image."
    extension: String
    "Filename of transformed image."
    filename: String
    "Height of transformed image."
    height: Int
    "The ID of the entity"
    id: ID
    "Size of transformed image."
    isNew: Boolean
    "Mime type of transformed image."
    mimeType: String
    "Path to transformed image."
    path: String
    "Size of transformed image."
    size: Int
    "The UID of the entity"
    uid: String
    "URL for transformed image."
    url: String
    "Width of transformed image."
    width: Int
}

"This is the interface implemented by all matrix blocks."
interface MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

"This is the interface implemented by all pages."
interface PageInterface {
    "The ID of the entity"
    id: ID
    "The page’s name."
    name: String
    "The page’s fields."
    pageFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The page’s rows."
    rows: [RowInterface]
    "The page’s settings, including buttons."
    settings: PageSettingsInterface
    "The UID of the entity"
    uid: String
}

"This is the interface implemented by all pages."
interface PageSettingsInterface {
    "The page’s back button label."
    backButtonLabel: String
    "The page’s button (back and submit) positions."
    buttonsPosition: String
    "The page’s button (back and submit) container attributes."
    containerAttributes: [FieldAttribute]
    "The page’s button (back and submit) CSS classes."
    cssClasses: String
    "Whether the page’s next button has conditions enabled, for multi-page forms."
    enableNextButtonConditions: Boolean
    "Whether the page has conditions enabled."
    enablePageConditions: Boolean
    "The page’s button (back and submit) input attributes."
    inputAttributes: [FieldAttribute]
    "The page’s conditions for whether to show the next button, for multi-page forms as a JSON string."
    nextButtonConditions: String
    "The page’s conditions as a JSON string."
    pageConditions: String
    "Whether to show the page’s back button."
    showBackButton: Boolean
    "The page’s submit button label."
    submitButtonLabel: String
}

"This is the interface implemented by all rows."
interface RowInterface {
    "The ID of the entity"
    id: ID
    "The row’s fields."
    rowFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The UID of the entity"
    uid: String
}

"This is the interface implemented by SEOmatic."
interface SeomaticInterface {
    "The FrontendTemplateContainer SEOmatic container."
    frontendTemplateContainer: String @deprecated(reason: "This query is deprecated and will be removed in the future. You should use `frontendTemplates` instead.")
    frontendTemplates(
        "The site handle to fetch frontend containers for."
        site: String,
        "The site ID to fetch frontend containers for."
        siteId: Int,
        "The frontend container type."
        type: SeomaticFrontendTemplate
    ): [FileContents]
    "The MetaJsonLdContainer SEOmatic container."
    metaJsonLdContainer: String
    "The MetaLinkContainer SEOmatic container."
    metaLinkContainer: String
    "The MetaScriptContainer SEOmatic container."
    metaScriptContainer: String
    "The MetaSiteVarsContainer SEOmatic container."
    metaSiteVarsContainer: String
    "The MetaTagContainer SEOmatic container."
    metaTagContainer: String
    "The MetaTitleContainer SEOmatic container."
    metaTitleContainer: String
    sitemapIndexes(
        "Optional - The site handle to resolve the sitemap for."
        site: String,
        "Optional - The site ID to resolve the sitemap for."
        siteId: Int
    ): [FileContents]
    sitemapStyles: FileContents
    sitemaps(
        "Optional - the sitemap filename."
        filename: String,
        "Optional - The site handle to list the sitemaps for."
        site: String,
        "Optional - The site ID to list the sitemaps for."
        siteId: Int,
        "Optional - The source bundles handle to get the  sitemap for."
        sourceBundleHandle: String,
        "Optional - The source bundle type to get the sitemaps for."
        sourceBundleType: String
    ): [FileContents]
}

"This is the interface implemented by all users."
interface UserInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "The user’s addresses."
    addresses(
        "Narrows the query results based on the addresses’ administrative areas."
        administrativeArea: [String],
        "Narrows the query results based on the addresses’ country codes."
        countryCode: [String],
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Sets the limit for paginated results."
        limit: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results based on the addresses’ owners."
        ownerId: [QueryArgument],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String]
    ): [AddressInterface]
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "The user’s email."
    email: String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The user’s first name."
    firstName: String
    "The user’s first name or username."
    friendlyName: String
    "The user’s full name."
    fullName: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The user’s last name."
    lastName: String
    "The user’s full name or username."
    name: String!
    "The user’s preferences."
    preferences: String!
    "The user’s preferred language."
    preferredLanguage: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
    "The username."
    username: String
}

type Address implements AddressInterface & ElementInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "First line of the address"
    addressLine1: String
    "Second line of the address"
    addressLine2: String
    "Administrative area."
    administrativeArea: String
    "Whether the element is archived or not."
    archived: Boolean
    "Two-letter country code"
    countryCode: String!
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Dependent locality"
    dependentLocality: String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The first name on the address."
    firstName: String
    "The full name on the address."
    fullName: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The last name on the address."
    lastName: String
    "Latitude"
    latitude: String
    "Locality"
    locality: String
    "Longitude"
    longitude: String
    "Organization name"
    organization: String
    "Organization tax ID"
    organizationTaxId: String
    "Postal code"
    postalCode: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "Sorting code"
    sortingCode: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type Element implements ElementInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type FieldAttribute {
    label: String
    value: String
}

type FieldOption {
    "Whether this option has been marked as a default."
    isDefault: Boolean
    "Whether this option has been marked as an `optgroup`."
    isOptgroup: Boolean
    "The label of the option."
    label: String
    "The value of the option."
    value: String
}

type Field_Address implements FieldInterface {
    address1Collapsed: Boolean
    address1DefaultValue: String
    address1Enabled: Boolean
    address1ErrorMessage: String
    address1Hidden: Boolean
    address1Label: String
    address1Placeholder: String
    address1PrePopulate: String
    address1Required: Boolean
    address2Collapsed: Boolean
    address2DefaultValue: String
    address2Enabled: Boolean
    address2ErrorMessage: String
    address2Hidden: Boolean
    address2Label: String
    address2Placeholder: String
    address2PrePopulate: String
    address2Required: Boolean
    address3Collapsed: Boolean
    address3DefaultValue: String
    address3Enabled: Boolean
    address3ErrorMessage: String
    address3Hidden: Boolean
    address3Label: String
    address3Placeholder: String
    address3PrePopulate: String
    address3Required: Boolean
    autocompleteCollapsed: Boolean
    autocompleteCurrentLocation: Boolean
    autocompleteDefaultValue: String
    autocompleteEnabled: Boolean
    autocompleteErrorMessage: String
    autocompleteIntegration: String
    autocompleteLabel: String
    autocompletePlaceholder: String
    autocompletePrePopulate: String
    autocompleteRequired: Boolean
    cityCollapsed: Boolean
    cityDefaultValue: String
    cityEnabled: Boolean
    cityErrorMessage: String
    cityHidden: Boolean
    cityLabel: String
    cityPlaceholder: String
    cityPrePopulate: String
    cityRequired: Boolean
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    countryCollapsed: Boolean
    countryDefaultValue: String
    countryEnabled: Boolean
    countryErrorMessage: String
    countryHidden: Boolean
    countryLabel: String
    countryOptions: [FieldAttribute]
    countryPlaceholder: String
    countryPrePopulate: String
    countryRequired: Boolean
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    enableAutocomplete: Boolean
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    stateCollapsed: Boolean
    stateDefaultValue: String
    stateEnabled: Boolean
    stateErrorMessage: String
    stateHidden: Boolean
    stateLabel: String
    statePlaceholder: String
    statePrePopulate: String
    stateRequired: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
    zipCollapsed: Boolean
    zipDefaultValue: String
    zipEnabled: Boolean
    zipErrorMessage: String
    zipHidden: Boolean
    zipLabel: String
    zipPlaceholder: String
    zipPrePopulate: String
    zipRequired: Boolean
}

type Field_Agree implements FieldInterface {
    checkedValue: String
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    defaultState: Boolean
    defaultValue: String
    description: String
    descriptionHtml: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    uncheckedValue: String
    "The field’s visibility."
    visibility: String
}

type Field_Calculations implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    formula: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Checkboxes implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    layout: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    multi: Boolean
    "The field’s name."
    name: String
    options: [FieldOption]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    toggleCheckbox: String
    toggleCheckboxLabel: String
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Date implements FieldInterface {
    ampmLabel: String
    ampmPlaceholder: String
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    dateFormat: String
    datePickerOptions: [FieldAttribute]
    dayLabel: String
    dayPlaceholder: String
    defaultDate: DateTime
    defaultOption: String
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    displayType: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    hourLabel: String
    hourPlaceholder: String
    "The ID of the entity"
    id: ID
    includeDate: Boolean
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    includeTime: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    maxDate: DateTime
    minDate: DateTime
    minuteLabel: String
    minutePlaceholder: String
    monthLabel: String
    monthPlaceholder: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    secondLabel: String
    secondPlaceholder: String
    timeFormat: String
    timeLabel: String
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    useDatePicker: Boolean
    "The field’s visibility."
    visibility: String
    yearLabel: String
    yearPlaceholder: String
}

type Field_Dropdown implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    multi: Boolean
    "The field’s name."
    name: String
    options: [FieldOption]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Email implements FieldInterface {
    blockedDomains: [String]
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    uniqueValue: Boolean
    validateDomain: Boolean
    "The field’s visibility."
    visibility: String
}

type Field_Group implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s nested fields."
    fields: [FieldInterface]
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s nested rows."
    nestedRows: [RowInterface]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Heading implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    headingSize: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Hidden implements FieldInterface {
    columnType: String
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    cookieName: String
    "The field’s CSS classes."
    cssClasses: String
    defaultOption: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    queryParameter: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Html implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    htmlContent: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_MultiLineText implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    limit: Boolean
    limitAmount: Int
    limitType: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    richTextButtons: [String]
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    useRichText: Boolean
    "The field’s visibility."
    visibility: String
}

type Field_Name implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    firstNameCollapsed: Boolean
    firstNameDefaultValue: String
    firstNameEnabled: Boolean
    firstNameErrorMessage: String
    firstNameLabel: String
    firstNamePlaceholder: String
    firstNamePrePopulate: String
    firstNameRequired: Boolean
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    lastNameCollapsed: Boolean
    lastNameDefaultValue: String
    lastNameEnabled: Boolean
    lastNameErrorMessage: String
    lastNameLabel: String
    lastNamePlaceholder: String
    lastNamePrePopulate: String
    lastNameRequired: Boolean
    "The field handle for another field that this value should match exactly."
    matchField: String
    middleNameCollapsed: Boolean
    middleNameDefaultValue: String
    middleNameEnabled: Boolean
    middleNameErrorMessage: String
    middleNameLabel: String
    middleNamePlaceholder: String
    middleNamePrePopulate: String
    middleNameRequired: Boolean
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    prefixCollapsed: Boolean
    prefixDefaultValue: String
    prefixEnabled: Boolean
    prefixErrorMessage: String
    prefixLabel: String
    prefixOptions: [FieldAttribute]
    prefixPlaceholder: String
    prefixPrePopulate: String
    prefixRequired: Boolean
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    useMultipleFields: Boolean
    "The field’s visibility."
    visibility: String
}

type Field_Number implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    decimals: Int
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    limit: Boolean
    "The field handle for another field that this value should match exactly."
    matchField: String
    max: Float
    min: Float
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Password implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Payment implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    paymentIntegration: String
    paymentIntegrationType: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    providerSettings: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Phone implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    countryAllowed: String
    countryCollapsed: Boolean
    countryDefaultValue: String
    countryEnabled: Boolean
    countryOptions: [FieldAttribute]
    countryShowDialCode: Boolean
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Radio implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    layout: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    options: [FieldOption]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Recipients implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    displayType: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    multiple: Boolean
    "The field’s name."
    name: String
    options: [FieldOption]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Repeater implements FieldInterface {
    addLabel: String
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s nested fields."
    fields: [FieldInterface]
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    maxRows: Int
    minRows: Int
    "The field’s name."
    name: String
    "The field’s nested rows."
    nestedRows: [RowInterface]
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Section implements FieldInterface {
    borderColor: String
    borderStyle: String
    borderWidth: Int
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Signature implements FieldInterface {
    backgroundColor: String
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    penColor: String
    penWeight: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_SingleLineText implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    limit: Boolean
    limitAmount: Int
    limitType: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Summary implements FieldInterface {
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

type Field_Table implements FieldInterface {
    addRowLabel: String
    columnType: String
    columns: [KeyValueType]
    "The field’s conditions as a JSON string."
    conditions: String
    "The field’s container attributes."
    containerAttributes: [FieldAttribute]
    "The field’s CSS classes."
    cssClasses: String
    "The field’s default value as a string. Some fields have different fields for their default value."
    defaultValue: String
    defaults: String
    "The field’s display name (last portion of the class)."
    displayName: String
    "Whether the field has conditions enabled."
    enableConditions: Boolean
    "Whether the field has content encryption enabled."
    enableContentEncryption: Boolean
    "The field’s error message."
    errorMessage: String
    "The field’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "Whether the field should be included in email content."
    includeInEmail: Boolean
    "The field’s input attributes."
    inputAttributes: [FieldAttribute]
    "The field’s full GQL input type. Useful for mutations."
    inputTypeName: String
    "The field’s instructions."
    instructions: String
    "The field’s instructions position. This will be a `verbb\\formie\\positions` class name."
    instructionsPosition: String
    "The field’s label position. This will be a `verbb\\formie\\positions` class name."
    labelPosition: String
    "The field handle for another field that this value should match exactly."
    matchField: String
    maxRows: Int
    minRows: Int
    "The field’s name."
    name: String
    "The field’s placeholder."
    placeholder: String
    "The field’s pre-populated value extracted from the query string."
    prePopulate: String
    "Whether the field is required."
    required: Boolean
    searchable: Boolean
    static: Boolean
    "The field’s type."
    type: String
    "The field’s full GQL type."
    typeName: String
    "The UID of the entity"
    uid: String
    "The field’s visibility."
    visibility: String
}

"Contents of a file"
type FileContents {
    contents: String
    filename: String!
}

type FormIntegrationsType {
    "Whether the integration is enabled."
    enabled: Boolean
    "The integration’s handle."
    handle: String
    "The integration’s name."
    name: String
    "The integration’s settings as a JSON string."
    settings: String
}

type FormSettingsType {
    "The form’s default instructions position for fields. This will be a `verbb\\formie\\positions` class name."
    defaultInstructionsPosition: String
    "The form’s default label position for fields. This will be a `verbb\\formie\\positions` class name."
    defaultLabelPosition: String
    "Whether to show the form’s current page title."
    displayCurrentPageTitle: Boolean
    "Whether to show the form’s title."
    displayFormTitle: Boolean
    "Whether to show the form’s page progress."
    displayPageProgress: Boolean
    "Whether to show the form’s page tabs."
    displayPageTabs: Boolean
    "The form’s submit error message."
    errorMessageHtml: String
    "The form’s error message position. Either `null`, `top-form` or `bottom-form`."
    errorMessagePosition: String
    "The form’s enabled integrations."
    integrations: [FormIntegrationsType]
    "The type of loading indicator to use. Either `spinner` or `text`."
    loadingIndicator: String
    "The form’s loading indicator text."
    loadingIndicatorText: String
    "The form’s progress bar position. Either `start` or `end`."
    progressPosition: String
    "The form’s submit action entry (for redirection), if `submitAction` is `entry`."
    redirectEntry(
        "Narrows the query results to only entries that were posted on or after a certain date."
        after: String,
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
        ancestorDist: Int,
        "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
        ancestorOf: Int,
        "Narrows the query results based on the user group the entries’ authors belong to."
        authorGroup: [String],
        "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
        authorGroupId: [QueryArgument],
        "Narrows the query results based on the entries’ authors."
        authorId: [QueryArgument],
        "Narrows the query results to only entries that were posted before a certain date."
        before: String,
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
        descendantDist: Int,
        "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
        descendantOf: Int,
        "Whether to only return entries that the user has permission to edit."
        editable: Boolean,
        "Narrows the query results based on the entries’ expiry dates."
        expiryDate: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on whether the elements have any descendants in their structure."
        hasDescendants: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
        leaves: Boolean,
        "Narrows the query results based on the elements’ level within the structure."
        level: Int,
        "Sets the limit for paginated results."
        limit: Int,
        "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
        nextSiblingOf: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
        positionedAfter: Int,
        "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
        positionedBefore: Int,
        "Narrows the query results based on the entries’ post dates."
        postDate: [String],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
        prevSiblingOf: Int,
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Narrows the query results based on the section handles the entries belong to."
        section: [String],
        "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
        sectionId: [QueryArgument],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Determines which structure data should be joined into the query."
        structureId: Int,
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the entries’ entry type handles."
        type: [String],
        "Narrows the query results based on the entries’ entry types, per the types’ IDs."
        typeId: [QueryArgument],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String],
        "Explicitly determines whether the query should join in the structure data."
        withStructure: Boolean
    ): EntryInterface
    "The form’s submit action redirect URL, resolved depending on `submitAction` being `entry` or `url`."
    redirectUrl: String
    "Whether to the form should scroll to the top of the page when submitted."
    scrollToTop: Boolean
    "The form’s submit action. Either `message`, `entry`, `url`, `reload`."
    submitAction: String
    "Whether to hide the form’s success message."
    submitActionFormHide: Boolean
    "The form’s submit success message."
    submitActionMessageHtml: String
    "The form’s submit message position. Either `top-form` or `bottom-form`."
    submitActionMessagePosition: String
    "The form’s submit success message timeout in seconds."
    submitActionMessageTimeout: Int
    "The form’s submit redirect option (if in new tab or same tab). Either `same-tab` or `new-tab`."
    submitActionTab: String
    "The form’s submit method. Either `page-reload` or `ajax`."
    submitMethod: String
    "Whether to validate the form’s on focus."
    validationOnFocus: Boolean
    "Whether to validate the form’s on submit."
    validationOnSubmit: Boolean
}

type FormieCaptchaType {
    "The captcha handle."
    handle: String
    "The captcha name."
    name: String
    "The catpcha value."
    value: String
}

type FormieCsrfTokenType {
    "The CSRF name."
    name: String
    "The CSRF token."
    value: String
}

type KeyValueType {
    handle: String
    heading: String
    type: String
    width: String
}

type Mutation {
    ping: String
}

type PageSettingsType implements PageSettingsInterface {
    "The page’s back button label."
    backButtonLabel: String
    "The page’s button (back and submit) positions."
    buttonsPosition: String
    "The page’s button (back and submit) container attributes."
    containerAttributes: [FieldAttribute]
    "The page’s button (back and submit) CSS classes."
    cssClasses: String
    "Whether the page’s next button has conditions enabled, for multi-page forms."
    enableNextButtonConditions: Boolean
    "Whether the page has conditions enabled."
    enablePageConditions: Boolean
    "The page’s button (back and submit) input attributes."
    inputAttributes: [FieldAttribute]
    "The page’s conditions for whether to show the next button, for multi-page forms as a JSON string."
    nextButtonConditions: String
    "The page’s conditions as a JSON string."
    pageConditions: String
    "Whether to show the page’s back button."
    showBackButton: Boolean
    "The page’s submit button label."
    submitButtonLabel: String
}

type PageType implements PageInterface {
    "The ID of the entity"
    id: ID
    "The page’s name."
    name: String
    "The page’s fields."
    pageFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The page’s rows."
    rows: [RowInterface]
    "The page’s settings, including buttons."
    settings: PageSettingsInterface
    "The UID of the entity"
    uid: String
}

type Query {
    "This query is used to query for Imager X transforms."
    imagerTransform(
        "The asset id to transform."
        id: Int,
        "The handle of the named transform you want to generate."
        transform: String,
        "The asset url to transform."
        url: String
    ): [ImagerTransformedImageInterface]
    ping: String
}

type RowType implements RowInterface {
    "The ID of the entity"
    id: ID
    "The row’s fields."
    rowFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The UID of the entity"
    uid: String
}

"This entity has all the SEOmatic fields"
type SeomaticType implements SeomaticInterface {
    "The FrontendTemplateContainer SEOmatic container."
    frontendTemplateContainer: String @deprecated(reason: "This query is deprecated and will be removed in the future. You should use `frontendTemplates` instead.")
    frontendTemplates(
        "The site handle to fetch frontend containers for."
        site: String,
        "The site ID to fetch frontend containers for."
        siteId: Int,
        "The frontend container type."
        type: SeomaticFrontendTemplate
    ): [FileContents]
    "The MetaJsonLdContainer SEOmatic container."
    metaJsonLdContainer: String
    "The MetaLinkContainer SEOmatic container."
    metaLinkContainer: String
    "The MetaScriptContainer SEOmatic container."
    metaScriptContainer: String
    "The MetaSiteVarsContainer SEOmatic container."
    metaSiteVarsContainer: String
    "The MetaTagContainer SEOmatic container."
    metaTagContainer: String
    "The MetaTitleContainer SEOmatic container."
    metaTitleContainer: String
    sitemapIndexes(
        "Optional - The site handle to resolve the sitemap for."
        site: String,
        "Optional - The site ID to resolve the sitemap for."
        siteId: Int
    ): [FileContents]
    sitemapStyles: FileContents
    sitemaps(
        "Optional - the sitemap filename."
        filename: String,
        "Optional - The site handle to list the sitemaps for."
        site: String,
        "Optional - The site ID to list the sitemaps for."
        siteId: Int,
        "Optional - The source bundles handle to get the  sitemap for."
        sourceBundleHandle: String,
        "Optional - The source bundle type to get the sitemaps for."
        sourceBundleType: String
    ): [FileContents]
}

type User implements ElementInterface & UserInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "The user’s addresses."
    addresses(
        "Narrows the query results based on the addresses’ administrative areas."
        administrativeArea: [String],
        "Narrows the query results based on the addresses’ country codes."
        countryCode: [String],
        "Narrows the query results based on the elements’ creation dates."
        dateCreated: [String],
        "Narrows the query results based on the elements’ last-updated dates."
        dateUpdated: [String],
        "Causes the query results to be returned in the order specified by the `id` argument."
        fixedOrder: Boolean,
        "Narrows the query results based on the elements’ IDs."
        id: [QueryArgument],
        "Causes the query results to be returned in reverse order."
        inReverse: Boolean,
        "Sets the limit for paginated results."
        limit: Int,
        "Sets the offset for paginated results."
        offset: Int,
        "Sets the field the returned elements should be ordered by."
        orderBy: String,
        "Narrows the query results based on the addresses’ owners."
        ownerId: [QueryArgument],
        "Determines which site should be selected when querying multi-site elements."
        preferSites: [QueryArgument],
        "Narrows the query results based on a reference string."
        ref: [String],
        "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
        relatedTo: [QueryArgument],
        "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
        relatedToAll: [QueryArgument],
        "Narrows the query results to elements that relate to an asset list defined with this argument."
        relatedToAssets: [AssetCriteriaInput],
        "Narrows the query results to elements that relate to a category list defined with this argument."
        relatedToCategories: [CategoryCriteriaInput],
        "Narrows the query results to elements that relate to an entry list defined with this argument."
        relatedToEntries: [EntryCriteriaInput],
        "Narrows the query results to elements that relate to a tag list defined with this argument."
        relatedToTags: [TagCriteriaInput],
        "Narrows the query results to elements that relate to a use list defined with this argument."
        relatedToUsers: [UserCriteriaInput],
        "Narrows the query results to only elements that match a search query."
        search: String,
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        site: [String],
        "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
        siteId: [QueryArgument],
        "Narrows the query results based on the unique identifier for an element-site relation."
        siteSettingsId: [QueryArgument],
        "Narrows the query results based on the elements’ slugs."
        slug: [String],
        "Narrows the query results based on the elements’ titles."
        title: [String],
        "Narrows the query results based on the elements’ UIDs."
        uid: [String],
        "Determines whether only elements with unique IDs should be returned by the query."
        unique: Boolean,
        "Narrows the query results based on the elements’ URIs."
        uri: [String]
    ): [AddressInterface]
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "The user’s email."
    email: String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The user’s first name."
    firstName: String
    "The user’s first name or username."
    friendlyName: String
    "The user’s full name."
    fullName: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The user’s last name."
    lastName: String
    "The user’s full name or username."
    name: String!
    "The user’s preferences."
    preferences: String!
    "The user’s preferred language."
    preferredLanguage: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
    "The username."
    username: String
}

type builderContent_blockCode_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    snippet: String
    snippetCollapsed: Boolean
    snippetLanguage(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    snippetName: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockDivider_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    dividerVariant(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockImageGallery_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockImageGridCalculated_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    showImageCaption: Boolean
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockImageGrid_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    imageColumns(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    imageTransform(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    showImageCaption: Boolean
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockImageSlider_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    imageTransform(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockImage_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    imageTransform(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    imageWidth(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    showImageCaption: Boolean
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockQuote_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    quote: String
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    source: String
    sourceSubline: String
    sourceUrl: String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockSection_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    sectionBackgroundColor(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    sectionPaddingVertical(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    spaceBetweenBlocks(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockSpacer_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    spacerVariant(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockTextFloatingImage_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    imagePosition: Boolean
    imageTransform(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    showImageCaption: Boolean
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    text: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockText_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    text: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

type builderContent_blockVideoYoutube_BlockType implements ElementInterface & MatrixBlockInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    autoplay: Boolean
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The ID of the field that owns the matrix block."
    fieldId: Int!
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    loop: Boolean
    "The ID of the primary owner of the Matrix block."
    primaryOwnerId: Int!
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The sort order of the matrix block within the owner element field."
    sortOrder: Int
    "The element’s status."
    status: String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The handle of the matrix block’s type."
    typeHandle: String!
    "The ID of the matrix block’s type."
    typeId: Int!
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
    videoId: String
    videoWidth(
        "If set to true, will return label instead of the value"
        label: Boolean
    ): String
}

type contact_Form implements ElementInterface & FormInterface {
    "Return a number of related elements for a field."
    _count(
        "The handle of the field that holds the relations."
        field: String!
    ): Int
    "Whether the element is archived or not."
    archived: Boolean
    "A list of captcha values (name and value) to assist with spam protection."
    captchas: [FormieCaptchaType]
    "The form’s config as JSON."
    configJson: String
    "A CSRF token (name and value)."
    csrfToken: FormieCsrfTokenType
    "The date the element was created."
    dateCreated: DateTime
    "The date the element was last updated."
    dateUpdated: DateTime
    "Whether the element is enabled or not."
    enabled: Boolean
    "The form’s fields."
    formFields(
        "Whether to include fields with visibility \"disabled\"."
        includeDisabled: Boolean
    ): [FieldInterface]
    "The form’s handle."
    handle: String
    "The ID of the entity"
    id: ID
    "The language of the site element is associated with."
    language: String
    "The form’s pages."
    pages: [PageInterface]
    "The form’s rows."
    rows: [RowInterface]
    "The element’s search score, if the `search` parameter was used when querying for the element."
    searchScore: Int
    "The form’s settings."
    settings: FormSettingsType
    "The ID of the site the element is associated with."
    siteId: Int
    "The unique identifier for an element-site relation."
    siteSettingsId: ID
    "The element’s slug."
    slug: String
    "The element’s status."
    status: String
    "The form’s endpoint for sending submissions to, if using POST requests."
    submissionEndpoint: String
    "The form’s GQL mutation name for submissions to use."
    submissionMutationName: String
    "The form’s rendered HTML."
    templateHtml(
        "The form template HTML will be rendered with these JSON serialized options."
        options: String,
        "The form field values will be populated with these JSON serialized options."
        populateFormValues: String
    ): String
    "The element’s title."
    title: String
    "Whether the element has been soft-deleted or not."
    trashed: Boolean
    "The UID of the entity"
    uid: String
    "The element’s URI."
    uri: String
}

"This entity has all the Imager X transform image interface fields."
type imagerx implements ImagerTransformedImageInterface {
    "Extension of transformed image."
    extension: String
    "Filename of transformed image."
    filename: String
    "Height of transformed image."
    height: Int
    "The ID of the entity"
    id: ID
    "Size of transformed image."
    isNew: Boolean
    "Mime type of transformed image."
    mimeType: String
    "Path to transformed image."
    path: String
    "Size of transformed image."
    size: Int
    "The UID of the entity"
    uid: String
    "URL for transformed image."
    url: String
    "Width of transformed image."
    width: Int
}

enum SeomaticFrontendTemplate {
    "The ads.txt file"
    ads
    "The humans.txt file"
    humans
    "The robots.txt file"
    robots
    "The security.txt file"
    security
}

"The `DateTime` scalar type represents a point in time."
scalar DateTime

"The `QueryArgument` scalar type represents a value to be using in Craft element queries. It can be an integer, a string, or a boolean value."
scalar QueryArgument

input AssetCriteriaInput {
    "Narrows the query results based on the elements’ creation dates."
    dateCreated: [String]
    "Narrows the query results based on the assets’ files’ last-modified dates."
    dateModified: String
    "Narrows the query results based on the elements’ last-updated dates."
    dateUpdated: [String]
    "Narrows the query results based on the assets’ filenames."
    filename: [String]
    "Causes the query results to be returned in the order specified by the `id` argument."
    fixedOrder: Boolean
    "Narrows the query results based on the folders the assets belong to, per the folders’ IDs."
    folderId: [QueryArgument]
    "Narrows the query results based on whether the assets have alternative text."
    hasAlt: Boolean
    "Narrows the query results based on the assets’ image heights."
    height: [String]
    "Narrows the query results based on the elements’ IDs."
    id: [QueryArgument]
    "Causes the query results to be returned in reverse order."
    inReverse: Boolean
    "Broadens the query results to include assets from any of the subfolders of the folder specified by `folderId`."
    includeSubfolders: Boolean
    "Narrows the query results based on the assets’ file kinds."
    kind: [String]
    "Sets the limit for paginated results."
    limit: Int
    "Sets the offset for paginated results."
    offset: Int
    "Sets the field the returned elements should be ordered by."
    orderBy: String
    "Determines which site should be selected when querying multi-site elements."
    preferSites: [QueryArgument]
    "Narrows the query results based on a reference string."
    ref: [String]
    "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
    relatedTo: [QueryArgument]
    "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
    relatedToAll: [QueryArgument]
    "Narrows the query results to elements that relate to an asset list defined with this argument."
    relatedToAssets: [AssetCriteriaInput]
    "Narrows the query results to elements that relate to a category list defined with this argument."
    relatedToCategories: [CategoryCriteriaInput]
    "Narrows the query results to elements that relate to an entry list defined with this argument."
    relatedToEntries: [EntryCriteriaInput]
    "Narrows the query results to elements that relate to a tag list defined with this argument."
    relatedToTags: [TagCriteriaInput]
    "Narrows the query results to elements that relate to a use list defined with this argument."
    relatedToUsers: [UserCriteriaInput]
    "Narrows the query results to only elements that match a search query."
    search: String
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    site: [String]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    siteId: [QueryArgument]
    "Narrows the query results based on the unique identifier for an element-site relation."
    siteSettingsId: [QueryArgument]
    "Narrows the query results based on the assets’ file sizes (in bytes)."
    size: [String]
    "Narrows the query results based on the elements’ slugs."
    slug: [String]
    "Narrows the query results based on the elements’ titles."
    title: [String]
    "Narrows the query results based on the elements’ UIDs."
    uid: [String]
    "Determines whether only elements with unique IDs should be returned by the query."
    unique: Boolean
    "Narrows the query results based on the user the assets were uploaded by, per the user’s ID."
    uploader: QueryArgument
    "Narrows the query results based on the elements’ URIs."
    uri: [String]
    "Narrows the query results based on the volumes the assets belong to, per the volumes’ handles."
    volume: [String]
    "Narrows the query results based on the volumes the assets belong to, per the volumes’ IDs."
    volumeId: [QueryArgument]
    "Narrows the query results based on the assets’ image widths."
    width: [String]
    "A list of transform handles to preload."
    withTransforms: [String]
}

input CategoryCriteriaInput {
    "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
    ancestorDist: Int
    "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
    ancestorOf: Int
    "Narrows the query results based on the elements’ creation dates."
    dateCreated: [String]
    "Narrows the query results based on the elements’ last-updated dates."
    dateUpdated: [String]
    "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
    descendantDist: Int
    "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
    descendantOf: Int
    "Whether to only return categories that the user has permission to edit."
    editable: Boolean
    "Causes the query results to be returned in the order specified by the `id` argument."
    fixedOrder: Boolean
    "Narrows the query results based on the category groups the categories belong to per the group’s handles."
    group: [String]
    "Narrows the query results based on the category groups the categories belong to, per the groups’ IDs."
    groupId: [QueryArgument]
    "Narrows the query results based on whether the elements have any descendants in their structure."
    hasDescendants: Boolean
    "Narrows the query results based on the elements’ IDs."
    id: [QueryArgument]
    "Causes the query results to be returned in reverse order."
    inReverse: Boolean
    "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
    leaves: Boolean
    "Narrows the query results based on the elements’ level within the structure."
    level: Int
    "Sets the limit for paginated results."
    limit: Int
    "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
    nextSiblingOf: Int
    "Sets the offset for paginated results."
    offset: Int
    "Sets the field the returned elements should be ordered by."
    orderBy: String
    "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
    positionedAfter: Int
    "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
    positionedBefore: Int
    "Determines which site should be selected when querying multi-site elements."
    preferSites: [QueryArgument]
    "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
    prevSiblingOf: Int
    "Narrows the query results based on a reference string."
    ref: [String]
    "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
    relatedTo: [QueryArgument]
    "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
    relatedToAll: [QueryArgument]
    "Narrows the query results to elements that relate to an asset list defined with this argument."
    relatedToAssets: [AssetCriteriaInput]
    "Narrows the query results to elements that relate to a category list defined with this argument."
    relatedToCategories: [CategoryCriteriaInput]
    "Narrows the query results to elements that relate to an entry list defined with this argument."
    relatedToEntries: [EntryCriteriaInput]
    "Narrows the query results to elements that relate to a tag list defined with this argument."
    relatedToTags: [TagCriteriaInput]
    "Narrows the query results to elements that relate to a use list defined with this argument."
    relatedToUsers: [UserCriteriaInput]
    "Narrows the query results to only elements that match a search query."
    search: String
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    site: [String]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    siteId: [QueryArgument]
    "Narrows the query results based on the unique identifier for an element-site relation."
    siteSettingsId: [QueryArgument]
    "Narrows the query results based on the elements’ slugs."
    slug: [String]
    "Determines which structure data should be joined into the query."
    structureId: Int
    "Narrows the query results based on the elements’ titles."
    title: [String]
    "Narrows the query results based on the elements’ UIDs."
    uid: [String]
    "Determines whether only elements with unique IDs should be returned by the query."
    unique: Boolean
    "Narrows the query results based on the elements’ URIs."
    uri: [String]
    "Explicitly determines whether the query should join in the structure data."
    withStructure: Boolean
}

input EntryCriteriaInput {
    "Narrows the query results to only entries that were posted on or after a certain date."
    after: String
    "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `ancestorOf`."
    ancestorDist: Int
    "Narrows the query results to only elements that are ancestors of another element in its structure, provided by its ID."
    ancestorOf: Int
    "Narrows the query results based on the user group the entries’ authors belong to."
    authorGroup: [String]
    "Narrows the query results based on the user group the entries’ authors belong to, per the groups’ IDs."
    authorGroupId: [QueryArgument]
    "Narrows the query results based on the entries’ authors."
    authorId: [QueryArgument]
    "Narrows the query results to only entries that were posted before a certain date."
    before: String
    "Narrows the query results based on the elements’ creation dates."
    dateCreated: [String]
    "Narrows the query results based on the elements’ last-updated dates."
    dateUpdated: [String]
    "Narrows the query results to only elements that are up to a certain distance away from the element in its structure specified by `descendantOf`."
    descendantDist: Int
    "Narrows the query results to only elements that are descendants of another element in its structure provided by its ID."
    descendantOf: Int
    "Whether to only return entries that the user has permission to edit."
    editable: Boolean
    "Narrows the query results based on the entries’ expiry dates."
    expiryDate: [String]
    "Causes the query results to be returned in the order specified by the `id` argument."
    fixedOrder: Boolean
    "Narrows the query results based on whether the elements have any descendants in their structure."
    hasDescendants: Boolean
    "Narrows the query results based on the elements’ IDs."
    id: [QueryArgument]
    "Causes the query results to be returned in reverse order."
    inReverse: Boolean
    "Narrows the query results based on whether the elements are “leaves” in their structure (element with no descendants)."
    leaves: Boolean
    "Narrows the query results based on the elements’ level within the structure."
    level: Int
    "Sets the limit for paginated results."
    limit: Int
    "Narrows the query results to only the entry that comes immediately after another element in its structure, provided by its ID."
    nextSiblingOf: Int
    "Sets the offset for paginated results."
    offset: Int
    "Sets the field the returned elements should be ordered by."
    orderBy: String
    "Narrows the query results to only entries that are positioned after another element in its structure, provided by its ID."
    positionedAfter: Int
    "Narrows the query results to only entries that are positioned before another element in its structure, provided by its ID."
    positionedBefore: Int
    "Narrows the query results based on the entries’ post dates."
    postDate: [String]
    "Determines which site should be selected when querying multi-site elements."
    preferSites: [QueryArgument]
    "Narrows the query results to only the entry that comes immediately before another element in its structure, provided by its ID."
    prevSiblingOf: Int
    "Narrows the query results based on a reference string."
    ref: [String]
    "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
    relatedTo: [QueryArgument]
    "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
    relatedToAll: [QueryArgument]
    "Narrows the query results to elements that relate to an asset list defined with this argument."
    relatedToAssets: [AssetCriteriaInput]
    "Narrows the query results to elements that relate to a category list defined with this argument."
    relatedToCategories: [CategoryCriteriaInput]
    "Narrows the query results to elements that relate to an entry list defined with this argument."
    relatedToEntries: [EntryCriteriaInput]
    "Narrows the query results to elements that relate to a tag list defined with this argument."
    relatedToTags: [TagCriteriaInput]
    "Narrows the query results to elements that relate to a use list defined with this argument."
    relatedToUsers: [UserCriteriaInput]
    "Narrows the query results to only elements that match a search query."
    search: String
    "Narrows the query results based on the section handles the entries belong to."
    section: [String]
    "Narrows the query results based on the sections the entries belong to, per the sections’ IDs."
    sectionId: [QueryArgument]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    site: [String]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    siteId: [QueryArgument]
    "Narrows the query results based on the unique identifier for an element-site relation."
    siteSettingsId: [QueryArgument]
    "Narrows the query results based on the elements’ slugs."
    slug: [String]
    "Determines which structure data should be joined into the query."
    structureId: Int
    "Narrows the query results based on the elements’ titles."
    title: [String]
    "Narrows the query results based on the entries’ entry type handles."
    type: [String]
    "Narrows the query results based on the entries’ entry types, per the types’ IDs."
    typeId: [QueryArgument]
    "Narrows the query results based on the elements’ UIDs."
    uid: [String]
    "Determines whether only elements with unique IDs should be returned by the query."
    unique: Boolean
    "Narrows the query results based on the elements’ URIs."
    uri: [String]
    "Explicitly determines whether the query should join in the structure data."
    withStructure: Boolean
}

input TagCriteriaInput {
    "Narrows the query results based on the elements’ creation dates."
    dateCreated: [String]
    "Narrows the query results based on the elements’ last-updated dates."
    dateUpdated: [String]
    "Causes the query results to be returned in the order specified by the `id` argument."
    fixedOrder: Boolean
    "Narrows the query results based on the tag groups the tags belong to per the group’s handles."
    group: [String]
    "Narrows the query results based on the tag groups the tags belong to, per the groups’ IDs."
    groupId: [QueryArgument]
    "Narrows the query results based on the elements’ IDs."
    id: [QueryArgument]
    "Causes the query results to be returned in reverse order."
    inReverse: Boolean
    "Sets the limit for paginated results."
    limit: Int
    "Sets the offset for paginated results."
    offset: Int
    "Sets the field the returned elements should be ordered by."
    orderBy: String
    "Determines which site should be selected when querying multi-site elements."
    preferSites: [QueryArgument]
    "Narrows the query results based on a reference string."
    ref: [String]
    "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
    relatedTo: [QueryArgument]
    "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
    relatedToAll: [QueryArgument]
    "Narrows the query results to elements that relate to an asset list defined with this argument."
    relatedToAssets: [AssetCriteriaInput]
    "Narrows the query results to elements that relate to a category list defined with this argument."
    relatedToCategories: [CategoryCriteriaInput]
    "Narrows the query results to elements that relate to an entry list defined with this argument."
    relatedToEntries: [EntryCriteriaInput]
    "Narrows the query results to elements that relate to a tag list defined with this argument."
    relatedToTags: [TagCriteriaInput]
    "Narrows the query results to elements that relate to a use list defined with this argument."
    relatedToUsers: [UserCriteriaInput]
    "Narrows the query results to only elements that match a search query."
    search: String
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    site: [String]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    siteId: [QueryArgument]
    "Narrows the query results based on the unique identifier for an element-site relation."
    siteSettingsId: [QueryArgument]
    "Narrows the query results based on the elements’ slugs."
    slug: [String]
    "Narrows the query results based on the elements’ titles."
    title: [String]
    "Narrows the query results based on the elements’ UIDs."
    uid: [String]
    "Determines whether only elements with unique IDs should be returned by the query."
    unique: Boolean
    "Narrows the query results based on the elements’ URIs."
    uri: [String]
}

input UserCriteriaInput {
    "Narrows the query results based on whether the users have uploaded any assets."
    assetUploaders: Boolean
    "Narrows the query results based on whether the users are listed as the author of any entries."
    authors: Boolean
    "Narrows the query results based on the elements’ creation dates."
    dateCreated: [String]
    "Narrows the query results based on the elements’ last-updated dates."
    dateUpdated: [String]
    "Narrows the query results based on the users’ email addresses."
    email: [String]
    "Narrows the query results based on the users’ first names."
    firstName: [String]
    "Causes the query results to be returned in the order specified by the `id` argument."
    fixedOrder: Boolean
    "Narrows the query results based on the users’ full names."
    fullName: [String]
    "Narrows the query results based on the user group the users belong to."
    group: [QueryArgument]
    "Narrows the query results based on the user group the users belong to, per the groups’ IDs."
    groupId: [QueryArgument]
    "Narrows the query results to only users that have (or don’t have) a user photo."
    hasPhoto: Boolean
    "Narrows the query results based on the elements’ IDs."
    id: [QueryArgument]
    "Causes the query results to be returned in reverse order."
    inReverse: Boolean
    "Narrows the query results based on the users’ last names."
    lastName: [String]
    "Sets the limit for paginated results."
    limit: Int
    "Sets the offset for paginated results."
    offset: Int
    "Sets the field the returned elements should be ordered by."
    orderBy: String
    "Determines which site should be selected when querying multi-site elements."
    preferSites: [QueryArgument]
    "Narrows the query results based on a reference string."
    ref: [String]
    "Narrows the query results to elements that relate to the provided element IDs. This argument is ignored, if `relatedToAll` is also used."
    relatedTo: [QueryArgument]
    "Narrows the query results to elements that relate to *all* of the provided element IDs. Using this argument will cause `relatedTo` argument to be ignored. **This argument is deprecated.** `relatedTo: [\"and\", ...ids]` should be used instead."
    relatedToAll: [QueryArgument]
    "Narrows the query results to elements that relate to an asset list defined with this argument."
    relatedToAssets: [AssetCriteriaInput]
    "Narrows the query results to elements that relate to a category list defined with this argument."
    relatedToCategories: [CategoryCriteriaInput]
    "Narrows the query results to elements that relate to an entry list defined with this argument."
    relatedToEntries: [EntryCriteriaInput]
    "Narrows the query results to elements that relate to a tag list defined with this argument."
    relatedToTags: [TagCriteriaInput]
    "Narrows the query results to elements that relate to a use list defined with this argument."
    relatedToUsers: [UserCriteriaInput]
    "Narrows the query results to only elements that match a search query."
    search: String
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    site: [String]
    "Determines which site(s) the elements should be queried in. Defaults to the current (requested) site."
    siteId: [QueryArgument]
    "Narrows the query results based on the unique identifier for an element-site relation."
    siteSettingsId: [QueryArgument]
    "Narrows the query results based on the elements’ slugs."
    slug: [String]
    "Narrows the query results based on the elements’ titles."
    title: [String]
    "Narrows the query results based on the elements’ UIDs."
    uid: [String]
    "Determines whether only elements with unique IDs should be returned by the query."
    unique: Boolean
    "Narrows the query results based on the elements’ URIs."
    uri: [String]
    "Narrows the query results based on the users’ usernames."
    username: [String]
}
