{#
HOW TO USE
==================================================

Simple Image
{% set cat01Image = craft.assets.title('Cat 01').volume('templateImages').one() %}

{{ include('_components/image/image.twig', {
  data: {
    image: cat01Image ??? null,
    aspectRatio: 'aspect-landscape',
    renderPlainImage: true,
  }
}, withContext = false }}

Figure Image
{% set cat01Image = craft.assets.title('Cat 01').volume('templateImages').one() %}

{{ include('_components/image/image.twig', {
  data: {
    image: cat01Image ??? null,
    aspectRatio: 'aspect-landscape',
  }
}, withContext = false }}

Art Direction
{% set cat01Image = craft.assets.title('Cat 01').volume('templateImages').one() %}
{% set cat02Image = craft.assets.title('Cat 02').volume('templateImages').one() %}
{% set cat03Image = craft.assets.title('Cat 03').volume('templateImages').one() %}

{{ include('_components/image/image.twig', {
  data: {
    image: cat01Image ??? null,
    aspectRatio: 'aspect-landscape',
    sources: [
      [cat02Image, 'portrait', true, '(min-width: 430px)'],
      [cat03Image, 'square', true, '(min-width: 330px)'],
    ]
  }
}, withContext = false }}
#}

{# Set Defaults #}
{% set compDefaults = {
  data: {
    name: 'c-image',
    image: null,
    aspectRatio: 'aspect-landscape',
    transform: 'auto',
    objectFit: 'cover',
    lazy: true,
    showDominantColor: true,
    calcDominantColor: false,
    noscript: true,
    sources: null,
    caption: null,
    renderPlainImage: false,
    decorativeImage: false
  },
  classes: {
    root: 'block',
    custom: ''
  }
} %}

{# >>> Merge data / classes / variants (optional) #}
{% set props = {
  data: data is defined and data is iterable ? compDefaults.data | merge(data) : compDefaults.data,
  classes: classes is defined and classes is iterable ? compDefaults.classes | merge(classes) : compDefaults.classes,
} %}


{# Image #}
{% if props.data.image ??? null %}
  {% set imageSettings = {
    allowedExtensions: ['png', 'jpg', 'jpeg', 'webp'],
    format: 'webp'
  } %}

  {# Image Data Object #}
  {% set imageData = {
    extension: null,
    transformable: null,
    focalpoint: null,
    title: null,
    width: props.data.image.width,
    height: props.data.image.height,
    url: props.data.image.getUrl(),
    noscript: null,
    transforms: null,
    srcset: null,
    filetype: null,
    dominantColor: null,
    placeholder: null,
    caption: null,
    sources: null,
  } %}

  {# Extension #}
  {% set extension = props.data.image is iterable ? props.data.image.extension | lower : props.data.image | split('.') | last | lower %}


  {# If Transformable #}
  {% set isTranformable = extension in imageSettings.allowedExtensions %}


  {# Focal Point / Title / URL #}
  {% set title = props.data.image.title %}
  {% if props.data.image.assetTitle %}
    {% set title = props.data.image.assetTitle %}
  {% endif %}


  {# Transforms / Srcset #}
  {% if isTranformable %}
    {% set srcsetLegacy = craft.imager.transformImage(props.data.image, props.data.transform) %}
    {% set transforms = craft.imager.transformImage(props.data.image, props.data.transform, { format: imageSettings.format }) %}
    {% set srcset = craft.imager.srcset(transforms) | trim %}
  {% endif %}


  {# Dominant Color / Placeholder #}
  {% set dominantColor = craft.app.config.custom.dominantColor ??? 'transparent' %}
  {% if props.data.calcDominantColor
    and not craft.app.config.general.custom.localDevPerformance
    and isTranformable
    and transforms is defined
    and extension != 'png' %}
    {% set dominantColor = craft.imager.getDominantColor(transforms[0]) %}
  {% endif %}


  {# Caption #}
  {% set caption = null %}
  {% if props.data.caption %}
    {% set caption = {
      'title': props.data.image.assetTitle ??? null,
      'text': props.data.image.assetCaption ??? null,
      'source': props.data.image.assetSource ??? null,
      'sourceUrl': props.data.image.assetSourceUrl ??? null,
    } %}
  {% endif %}



  {# Sources #}
  {% set finaleSources = [] %}
  {% if props.data.sources | length > 1 %}
    {% for source in props.data.sources %}
      {% if isTranformable %}
        {% set srcsetLegacySource = craft.imager.transformImage(source[0] ??? null, props.data.transform) %}
        {% set transformsSource = craft.imager.transformImage(source[0] ??? null, props.data.transform, { format: imageSettings.format }) %}
        {% set srcsetSource = craft.imager.srcset(transformsSource) | trim %}

        {% set finaleSources = finaleSources|merge([[
          isTranformable and transformsSource is defined ? transformsSource[0].source.extension | lower : extension ??? null,
          srcsetSource ??? null,
          source[1] ??? true,
          source[2] ??? null
        ]]) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {# >>> Merge Settings #}
  {% set imageData = imageData|merge({
    'extension': extension,
    'transformable': isTranformable,
    'focalpoint': props.data.image.getFocalpoint('asCss') ??? '50% 50%',
    'title': title,
    'alt': props.data.decorativeImage ? '' : (props.data.image.assetAltText ??? title),
    'aspectRatio': props.data.aspectRatio ??? 'aspect-auto',
    'noscript': "<noscript><img src='#{imageData.url}' alt='#{title}'/></noscript>",
    'transforms': transforms ??? null,
    'srcset': srcset ??? imageData.url,
    'filetype': isTranformable and transforms is defined ? transforms[0].source.extension | lower : extension,
    'dominantColor': dominantColor,
    'placeholder': craft.imager.placeholder({
      color: dominantColor,
      width: isTranformable and transforms is defined ? transforms[0].width : imageData.width,
      height: isTranformable and transforms is defined ? transforms[0].height : imageData.height,
    }),
    'caption': caption,
    'sources': finaleSources
  }) %}


  {# >>> Render logic #}
  {% if props.data.renderPlainImage and not props.data.sources %}

    {# Render Plain Image #}
    {{ include('_components/image/_partials/_renderImage.twig', {}, withContext = true) }}

  {% elseif not props.data.renderPlainImage and not props.data.sources %}

    {# Render Figure Element #}
    {{ include('_components/image/_partials/_renderFigure.twig', {}, withContext = true) }}

  {% elseif not props.data.renderPlainImage and props.data.sources %}

    {# Render Figure in Picutre #}
    {{ include('_components/image/_partials/_renderPicture.twig', {}, withContext = true) }}

  {% endif %}
{% endif %}
