---
import DefaultLayout from "@/layouts/Default.astro";
import { ISEO } from "@/utils/parseSEO";
import { useTranslations } from "@/i18n/utils";
import { ui } from "@/i18n/ui";
import {parseSEO} from "../js/utils/parseSEO";

import {
  QueryEntrySeoDocument,
  QueryEntrySeoQuery,
  QueryEntrySeoQueryVariables,
} from "@/graphql/gql/graphql";

import { cmsClient } from "@/graphql/client/graphql-client";

interface IPreviewParams {
  [key: string]: string;
}

export interface Props {
  title: string;
  seo: ISEO;
  lang: string;
  siteHandle: string;
  siteId: string;
  typeHandle: string;
  sectionHandle: string;
  uri: string;
  id: number;
  token: string;
  xCraftPreview: string;
  xCraftLivePreview: string;
}

const {
  title,
  lang,
  siteHandle,
  siteId,
  typeHandle,
  sectionHandle,
  uri,
  id,
  token,
  xCraftPreview,
  xCraftLivePreview,
} = Astro.props;

if (!id) {
  Astro.response.status = 404;
  Astro.response.statusText = "Not found";
}

// TODO: in funktion auslagern
// auch in den beiden andern getPreviewData und GetEntryData
const getData = async (
  queryParameter: QueryEntrySeoQueryVariables,
  previewParams: IPreviewParams
) => {
  const client = cmsClient(previewParams);
  return await client.request(QueryEntrySeoDocument, {
    ...queryParameter,
  });
};

const { seomatic } = (await getData(
  {
    siteId: parseInt(siteId),
    uri: uri,
  },
  {
    token,
    xCraftPreview,
    xCraftLivePreview,
  }
)) as QueryEntrySeoQuery;

const seo = parseSEO(seomatic)

const t = siteHandle
  ? useTranslations(siteHandle as keyof typeof ui)
  : useTranslations("default" as keyof typeof ui);

// Get the right layout based on the site handle
let Layout: {} = DefaultLayout;
const Layouts: {[k: string]: {}} = {
  default_en: DefaultLayout,
  default_de: DefaultLayout,
};

if (siteHandle && Layouts && siteHandle in Layouts) {
  Layout = Layouts[siteHandle];
}
---

<!DOCTYPE html>
<html lang={lang}>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="generator" content={Astro.generator} />

  <title>{seo?.seoTitle ?? t("preview.title")}</title>

  {seo?.meta?.map((item) => <meta {...item} />)}
    {seo?.links?.map((item) => <link {...item} />)}
    {
      seo?.jsonLd?.map((item) => (
        <script type="application/ld+json" set:html={JSON.stringify(item)} />
      ))
    }
</head>
<body>
<Layout {...Astro.props} />
</body>
</html>

<script is:inline>
  document.documentElement.setAttribute(
    "data-theme",
    localStorage.getItem("theme") || "default"
  );
</script>
